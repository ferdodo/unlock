use wasm_bindgen::prelude::*;
use image::codecs::gif;
use crate::gif::{GifEncoder, Repeat};
use image::{Frame, Rgba, Delay};
use image::ImageBuffer;
use std::io::{Cursor};

#[wasm_bindgen]
pub fn convert_hexstrings_to_animated_gif(hex_strings: Vec<String>) -> String {
    let mut frames: Vec<Frame> = Vec::new();

    for hex_string in hex_strings {
		let image_data = match hex::decode(&hex_string) {
			Ok(b) => b,
			Err(err) => panic!("Failed to decode png hexstring ! \n {:?}", err)
		};

        let image = match image::load_from_memory(&image_data) {
       		Ok(b) => b,
			Err(err) => panic!("Failed to load image from buffer ! \n {:?}", err)
        };

        let rgba_image = image.to_rgba8();
        let delay = Delay::from_numer_denom_ms(100, 1);
        let raw_rgba_image: ImageBuffer<Rgba<u8>, Vec<u8>> = rgba_image;
        frames.push(Frame::from_parts(raw_rgba_image, image.width(), image.height(), delay));
    }

    let mut gif_data = Vec::new();
    let mut writer = Cursor::new(&mut gif_data);

    {
    	let mut encoder = GifEncoder::new(&mut writer);

    	match encoder.set_repeat(Repeat::Infinite) {
			Ok(b) => b,
			Err(err) => panic!("Failed to set gif repeat ! \n {:?}", err)
    	}

    	match encoder.encode_frames(frames) {
    		Ok(b) => b,
			Err(err) => panic!("Failed to encode frames to animated gif ! \n {:?}", err)
    	}
    }
    
    let gif_data_2 = writer.into_inner();

    let hex_gif_data: String = gif_data_2.iter().map(|b| format!("{:02X}", b)).collect();

    hex_gif_data
}


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_convert_hexstrings_to_animated_gif() {
        let hex_strings = vec![
to_string(),
to_string(),
        ];

        let result = convert_hexstrings_to_animated_gif(hex_strings);
        assert_eq!(result.len(), 646);
    }
}
